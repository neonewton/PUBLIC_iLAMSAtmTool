#!/usr/local/bin/python3

"""

## SETUP / Checklist

# Create virtual environment (replace `venv` with your preferred folder)
python3 -m venv venv

# Activate (macOS/Linux)
source venv/bin/activate

# Activate (Windows)
venv\Scripts\activate

# Check Python Version
python3 -V

# Install Required Packages
pip install -r requirements.txt

# Python Interpreter
Make sure your script uses the correct Python interpreter path:
#!/usr/local/bin/python3
In VS Code, use ⇧ + ⌘ + P → “Python: Select Interpreter” and choose Python 3.13 manually.

⚠️ Avoid using:
#!/usr/bin/env python3


"""
# Ensure you have started Chrome with:
r"""
MAC:
open -a "Google Chrome" --args \
  --remote-debugging-port=9222 \
  --user-data-dir="$HOME/chrome-debug-profile"
then
curl http://127.0.0.1:9222/json
WINDOWS:
& 'C:\Program Files\Google\Chrome\Application\chrome.exe' `
  --remote-debugging-port=9222 `
  --user-data-dir="C:\Users\Neone\chrome-debug-profile"
then
curl http://127.0.0.1:9222/json

"""

import sys, os, threading, time
from datetime import datetime
import tkinter as tk
#from tkinter import ttk
from tkinter import messagebox, filedialog
from tkinter.scrolledtext import ScrolledText
import pandas as pd
import xlwt
from ttkbootstrap import ttk , Style, Window
from ttkbootstrap.constants import *

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException

if os.name == "nt":        # Windows
    os.system("cls")
else:                      # Linux / macOS
    os.system("clear")

import time

"""
# 1) Path to your matching ChromeDriver
chrome_driver_path = r"C:\\Users\\Neone\\Driver\\chromedriver.exe"  
service = Service(chrome_driver_path)

# 2) Tell Selenium to hook into the existing Chrome debug port
options = Options()
options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")

# 3) Create the driver (this will *not* open a new browser window)
driver = webdriver.Chrome(service=service, options=options)

# 4) Confirm it s attached by printing the current title and URL
print("Attached to browser:", driver.title, driver.current_url)

"""
# Check which Python interpreter is in use
print("Running Bulk Courses Archived", sys.executable)


# https://ilams.lamsinternational.com/lams/admin/orgmanage.do?org=1

# https://ilams-bk.lamsinternational.com/lams/admin/orgmanage.do?org=1

# sort ID - need to click two times
//*[@id="idsorter"]/div/div
/html/body/div[1]/div/div/div/div[2]/div/table/thead/tr[1]/th[1]/div/div

#first row of the course table
//*[@id="content"]/div/div[2]/div/table/tbody/tr[1]/td[2]
/html/body/div[1]/div/div/div/div[2]/div/table/tbody/tr[1]/td[2]/a

#second row of the course table
//*[@id="content"]/div/div[2]/div/table/tbody/tr[2]/td[2]
/html/body/div[1]/div/div/div/div[2]/div/table/tbody/tr[2]/td[2]

#Button of Edit
//*[@id="editCourse"]
/html/body/div[1]/div/div/div/div[2]/div[1]/div[1]/div/div/a[1]

# Status of the course
//*[@id="stateId"]
/html/body/div[1]/div/div/div/div[2]/form/table/tbody/tr[4]/td[2]/select

#Select option of the course status to Archived
//*[@id="stateId"]/option[3]
/html/body/div[1]/div/div/div/div[2]/form/table/tbody/tr[4]/td[2]/select/option[3]

# Button of Save
//*[@id="saveButton"]
/html/body/div[1]/div/div/div/div[2]/form/div[11]/input

# ---- UI Global Log Universal logger function ----
def log(msg, newline=True):
    log_widget.config(state='normal')
    log_widget.insert('end', msg + ('\n' if newline else ''))
    log_widget.see('end')
    log_widget.config(state='disabled')
    root.update_idletasks()

# ---- Constants for Excel ----
STUDENT_HEADERS = ["* login", "* organisation", "* roles","* add to lessons [yes/no]",""]
STAFF_HEADERS   = ["* login", "* organisation", "* roles", "* add to lessons [yes/no]",""]

def parse_emails(text):
    emails = []
    for line in text.splitlines():
        for part in line.split(','):
            email = part.strip()
            if email:
                emails.append(email)
    return emails

def save_xls(folder, filename, headers, rows):
    wb = xlwt.Workbook()
    ws = wb.add_sheet('Sheet1')
    for col, h in enumerate(headers): ws.write(0, col, h)
    for r, row in enumerate(rows, start=1):
        for c, val in enumerate(row): ws.write(r, c, val)
    path = os.path.join(folder, filename)
    wb.save(path)
    return path

def build_student_file(folder, course_name, course_id, emails, role_entry, add_info_text):
    """
    One file, many emails all tied to the same course_id.
    """
    today = datetime.now().strftime("%d%m%y")
    rows = [
        # each row: [email, course_id, role, upload_flag, extra_info]
        [email, course_id, role_entry, "Yes", add_info_text]
        for email in emails
    ]
    fname = f"{course_name}_CID{course_id}_{today}.xls"
    return save_xls(folder, fname, STUDENT_HEADERS, rows)

def build_staff_files(folder, department, course_ids, emails, role_entry, add_infos):
    """
    One file per staff email; each file contains multiple rows,
    one per course_id.
    """
    today = datetime.now().strftime("%d%m%y")
    files = []
    for email in emails:
        rows = [
            # (for each course, pull its matching add_info)
            [email, cid, role_entry, "Yes", info]
            for cid, info in zip(course_ids, add_infos)
        ]
        # safe-filename the email if needed, or strip “@” / “.” etc
        safe_email = email.replace("@ntu.edu.sg", "").replace("@email.com","")
        fname = f"{department}_{safe_email}_{today}.xls"
        files.append(save_xls(folder, fname, STAFF_HEADERS, rows))
    return files

# ---- UI Tkinter Setup ----
#root = tk.Tk()
root = Window(themename="cosmo") 
style = Style(theme="cosmo")

root.title("LAMS Automation Tool")

#branding colour purple
style.configure("secondary.TButton", background="#5C004D", foreground="#ffffff")
style.configure("secondary.TCheckbutton", background="#5C004D", foreground="#ffffff")
style.configure("secondary.TLabel", background="#5C004D", foreground="#ffffff")


today_2 = datetime.now().strftime("%d%m%y")
# for simplicity, will direct the save dir to user's downloads folder
home = os.path.expanduser("~")
downloads = os.path.join(home, "Downloads", f"User Excel Generation_{today_2}")
# for testing purpose, we use source code folder
script_dir = os.path.dirname(os.path.abspath(__file__))
output_folder = os.path.join(script_dir, os.pardir, "3 data", "output",f"LAMS User Excel Generation_{today_2}")
os.makedirs(output_folder, exist_ok=True)


# --- TTK Notebook for Tabs ---
notebook = ttk.Notebook(root)
notebook.grid(row=0, column=0, sticky="nsew")
root.grid_rowconfigure(0, weight=0)   # notebook row no longer expands
root.grid_rowconfigure(5, weight=1)   # log row soaks up all extra space
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)
root.grid_columnconfigure(2, weight=1)

# excel_frame  = tk.Frame(notebook, padx=5, pady=5)
# import_frame = tk.Frame(notebook, padx=5, pady=5)
# selenium_frame = tk.Frame(notebook, padx=5, pady=5)
excel_frame   = ttk.Frame(notebook, padding=5)
import_frame  = ttk.Frame(notebook, padding=5)
selenium_frame= ttk.Frame(notebook, padding=5)
#about_frame = tk.Frame(notebook, padx=15, pady=15)
#Order
notebook.add(import_frame, text="User Import")
notebook.add(selenium_frame, text="Elentra Link Upload")
notebook.add(excel_frame, text="User Excel Generation")

#notebook.add(about_frame, text="About")

# ---- Global widgets for later disable/enable ----
global_buttons = []

# --- Control variables
mode_var    = tk.StringVar(value='staff')
header_var  = tk.StringVar()
save_dir_var = tk.StringVar(value=output_folder)
import_dir_var = tk.StringVar(value=output_folder)

btn_opts = dict(padx=5, pady=8) # padding of function buttons

# --- Grid options for Excel tab
excel_row_int = 0
excel_grid_opts = {
    'title_label':          dict(row=excel_row_int+0, column=0, columnspan=3, padx=10, pady=4, sticky='w'),
    'instruction_label':    dict(row=excel_row_int+1, column=0, columnspan=3, padx=10, pady=4, sticky='w'),
    'mode_staff_rb':        dict(row=excel_row_int+2, column=0, padx=8, pady=4, sticky='w'),
    'mode_student_rb':      dict(row=excel_row_int+2, column=1, padx=8, pady=4, sticky='w'),
    #'save_label':           dict(row=excel_row_int+3, column=0, sticky='e', padx=4),
    # 'browse_btn':           dict(row=excel_row_int+3, column=0, sticky= 'ew', padx=4, pady=4),
    # 'save_entry':           dict(row=excel_row_int+4, column=0, columnspan=2, sticky='ew', padx=4, pady=4),
    'browse_btn':           dict(row=excel_row_int+3, column=0, sticky= 'ew', padx=4, pady=4),
    'save_entry':           dict(row=excel_row_int+3, column=1, columnspan=2, sticky='ew', padx=4, pady=4),
    'header_text_label':    dict(row=excel_row_int+5, column=0, sticky='ne', padx=4),
    'header_label':         dict(row=excel_row_int+5, column=1, columnspan=2, sticky='w'),
    'emails_label':         dict(row=excel_row_int+6, column=0, sticky='ne', padx=4, pady=4),
    'emails_text':          dict(row=excel_row_int+6, column=1, columnspan=2, sticky='nsew', pady=4),
    'courseid_label':       dict(row=excel_row_int+7, column=0, sticky='ne', padx=4, pady=4),
    'courseid_text':        dict(row=excel_row_int+7, column=1, columnspan=2, sticky='nsew', pady=4),
    'add_info_label':       dict(row=excel_row_int+8, column=0, sticky='ne', padx=4, pady=4),
    'add_info_entry':       dict(row=excel_row_int+8, column=1, columnspan=2, sticky='nsew', pady=4),
    'coursename_label':     dict(row=excel_row_int+9, column=0, sticky='e', padx=4),
    'coursename_entry':     dict(row=excel_row_int+9, column=1, columnspan=2, sticky='ew', pady=4),
    'dept_label':           dict(row=excel_row_int+10, column=0, sticky='e', padx=4),
    'dept_entry':           dict(row=excel_row_int+10, column=1, columnspan=2, sticky='ew', pady=4),
    'role_label':           dict(row=excel_row_int+11, column=0, sticky='e', padx=4),
    'role_entry':           dict(row=excel_row_int+11, column=1, columnspan=2, sticky='ew', pady=4),
    'excel_btn_frame':      dict(row=excel_row_int+12, column=0, columnspan=3, sticky='w', pady=20)
}

sample_course_id_text="629\n630\n631\n632\n633\n634\n635\n636\n637"
sample_course_name_text="LKC TESTING SANDBOX 2025/2026\nCohort_2025Y1\nCohort_2024Y2\nCohort_2023Y3_Misc\nCohort_2023Y3_Posting_Quiz\nCohort_2023Y3_eModules\nCohort_2022Y4_Misc\nCohort_2022Y4_Posting_Quiz\nCohort_2021Y5_Misc"

###~~~~ GUI EXCEL TAB ~~~~###
tk.Label(excel_frame, text="/ User Excel Generation Automation", font=("Helvetic",14,"bold")).grid(**excel_grid_opts['title_label'])
tk.Label(excel_frame, text="Build the Staff or Student Excel file (.xlsx) for User Import in LAMS Admin.").grid(**excel_grid_opts['instruction_label'])
ttk.Radiobutton(excel_frame, bootstyle="info", text="Staff List", variable=mode_var, value='staff', command=lambda:switch_mode()).grid(**excel_grid_opts['mode_staff_rb'])
ttk.Radiobutton(excel_frame, bootstyle="info", text="Student List", variable=mode_var, value='student', command=lambda:switch_mode()).grid(**excel_grid_opts['mode_student_rb'])
#tk.Label(excel_frame, text="Save Folder:").grid(**excel_grid_opts['save_label'])

ttk.Button(excel_frame, style="secondary.Tbutton", text="Step 1: Browse..", command=lambda:select_folder(save_dir_var)).grid(**excel_grid_opts['browse_btn'])
tk.Entry(excel_frame, textvariable=save_dir_var).grid(**excel_grid_opts['save_entry'])
tk.Label(excel_frame, text="Header:").grid(**excel_grid_opts['header_text_label'])
tk.Label(excel_frame, textvariable=header_var, fg='dark gray').grid(**excel_grid_opts['header_label'])
tk.Label(excel_frame, text="Emails:").grid(**excel_grid_opts['emails_label'])
email_text = tk.Text(excel_frame, width=1, height=5); email_text.grid(**excel_grid_opts['emails_text'])
email_text.insert('1.0', "user1@email.com\nuser2@email.com\nuser3@email.com\nnelton.tan@ntu.edu.sg")
tk.Label(excel_frame, text="Course ID:").grid(**excel_grid_opts['courseid_label'])
course_id_text = tk.Text(excel_frame, width=1, height=5); course_id_text.grid(**excel_grid_opts['courseid_text']); 
#course_id_text.insert('1.0', sample_course_id_text)
tk.Label(excel_frame, text="Course Name:").grid(**excel_grid_opts['coursename_label'])
course_name_entry = tk.Entry(excel_frame, width=61); course_name_entry.grid(**excel_grid_opts['coursename_entry']); course_name_entry.insert(0, "Cohort_Test_Name")
tk.Label(excel_frame, text="Additional Info:").grid(**excel_grid_opts['add_info_label'])
add_info_text = tk.Text(excel_frame, width=1, height=5); add_info_text.grid(**excel_grid_opts['add_info_entry']); 
#add_info_text.insert('1.0', sample_course_name_text)
tk.Label(excel_frame, text="Department:").grid(**excel_grid_opts['dept_label'])
dept_entry = tk.Entry(excel_frame, width=61); dept_entry.grid(**excel_grid_opts['dept_entry']); 
dept_entry.insert(0, "Test_Department")
tk.Label(excel_frame, text="Role:").grid(**excel_grid_opts['role_label'])
role_entry = tk.Entry(excel_frame, width=1); role_entry.grid(**excel_grid_opts['role_entry']); 
# role_entry.insert(0, 'Learner')
excel_btn_frame = tk.Frame(excel_frame); 
excel_btn_frame.grid(**excel_grid_opts['excel_btn_frame'])
excel_btn_frame.grid_columnconfigure(0, weight=1); 
excel_btn_frame.grid_columnconfigure(2, weight=1)
excel_run_btn = ttk.Button(excel_btn_frame, style="secondary.Tbutton", text="Step 2: Run Excel", command=lambda:excel_run_threadsafe())
excel_run_btn.grid  (row=0, column=1, sticky='ew',**btn_opts)
#excel_close_btn.grid(row=0, column=2, **btn_opts)
#excel_close_btn = ttk.Button(btn_frame, bootstyle="dark-outline", text="Close Program", width=10, command=root.destroy)
global_buttons += [excel_run_btn]


###~~~~ GUI IMPORT TAB ~~~~###
import_row_int = 0
import_grid_opts = {
    'title_label':          dict(row=import_row_int+0, column=0, columnspan=3, padx=10, pady=4, sticky='w'),
    'instruction_label':    dict(row=import_row_int+1, column=0, columnspan=3, padx=10, pady=4, sticky='w'),
    'folder_browse':        dict(row=import_row_int+2, column=0, padx=4, pady=4, sticky='w'),
    'folder_entry':         dict(row=import_row_int+3, column=0, columnspan=3, padx=8, pady=4, sticky='ew'),
    'Scan_btn':             dict(row=import_row_int+4, column=0, columnspan=2, padx=4, pady=4, sticky='w'),
    'to_import_log_box':    dict(row=import_row_int+5, column=0, columnspan=3, padx=4, pady=4, sticky='ew'),
    'imp_btn_frame':        dict(row=import_row_int+8, column=0, columnspan=3, pady=20, sticky='w'),
    
}

# import_frame.grid_columnconfigure(1, weight=1); 
# import_frame.grid_rowconfigure(2, weight=1)
#import_frame.grid(sticky='nsew')
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=0)
root.grid_columnconfigure(2, weight=0)

# Title + instruction
tk.Label(import_frame, text="/ User Import Automation", font=("Helvetic",14,"bold")).grid(**import_grid_opts['title_label'])
tk.Label(import_frame, text="Build the Staff or Student Excel file (.xlsx) for User Import in LAMS Admin.").grid(**import_grid_opts['instruction_label'])
# Folder picker
#tk.Label(import_frame, text="Folder:").grid(**import_grid_opts['folder_label'])
ttk.Button(import_frame, style="secondary.Tbutton", text="Step1 : Browse…", command=lambda:select_folder(import_dir_var)).grid(**import_grid_opts['folder_browse'])
tk.Entry(import_frame, textvariable=import_dir_var, width=45).grid(**import_grid_opts['folder_entry'])
# “Scan files” button
ttk.Button(import_frame, style="secondary.Tbutton", text="Step 2: Scan files to import", command=lambda: scan_files_to_import()).grid(**import_grid_opts['Scan_btn'])
# ScrolledText log area
to_import_box = ScrolledText(import_frame, wrap="word", width=45, height=15, state="disabled").grid(**import_grid_opts['to_import_log_box'])

# freeze the folder row (row 2) and the scan‐button row (row 3)
#import_frame.grid_rowconfigure(import_grid_opts['folder_label']['row'], weight=0)
#import_frame.grid_rowconfigure(import_grid_opts['scan_btn']['row'], weight=0)

# let only the “to_import_box” row expand
#import_frame.grid_rowconfigure(import_grid_opts['to_import_box']['row'], weight=1)

# let the middle column (the Entry + log box) grow when the window is wider
#import_frame.grid_columnconfigure(import_grid_opts['folder_entry']['column'], weight=1)


# — Import buttons (grid) —
imp_btn_frame = tk.Frame(import_frame); 
imp_btn_frame.grid(**import_grid_opts['imp_btn_frame'])
imp_btn_frame.grid_columnconfigure(0, weight=0); 
# imp_frame.grid_columnconfigure(3, weight=1)
import_start_btn = ttk.Button(imp_btn_frame, style="secondary.Tbutton", text="Step 3: Run Import", command=lambda:import_all_threadsafe())
import_stop_btn = ttk.Button(imp_btn_frame, bootstyle="dark-outline", text="Stop Import", command=lambda:import_abort.set(True), state='disabled')
#import_close_btn = ttk.Button(imp_frame, bootstyle="dark-outline", text="Close Program", width=10, command=root.destroy)
import_start_btn.grid(row=0, column=1, sticky='ew', **btn_opts)
import_stop_btn.grid( row=0, column=2, sticky='ew', **btn_opts)
#import_close_btn.grid(row=0, column=3, **btn_opts)

global_buttons += [import_start_btn, import_stop_btn]


###~~~~ GUI Elentra Link Upload TAB (Code #1) ~~~~###
sel_row_int = 0
sel_pad = dict(padx=8, pady=6)
sel_grid_opts = {
    'title_label':                  dict(row=sel_row_int+0, column=0, columnspan=3, padx=10, pady=4, sticky='w'),
    'instruction_label':            dict(row=sel_row_int+1, column=0, columnspan=3, padx=10, pady=4, sticky='w'),
    'instruction_box':              dict(row=sel_row_int+2, column=0, columnspan=3, padx=4, pady=4, sticky='ew'),
    'step':                         dict(row=sel_row_int+3, column=0, columnspan=3, padx=4, pady=4, sticky='w'),
    'Elentra_Event_ID':             dict(row=sel_row_int+4, column=0, padx=8, pady=4, sticky='e'),
    'Elentra_Event_entry':          dict(row=sel_row_int+4, column=1, padx=8, columnspan=3, pady=4, sticky='ew'),
    'LAMS_Lesson_ID':               dict(row=sel_row_int+5, column=0, padx=8, pady=4, sticky='e'),
    'LAMS_Lesson_ID_entry':         dict(row=sel_row_int+5, column=1, padx=8, columnspan=3, pady=4, sticky='ew'),
    'LAMS_Lesson_Title':            dict(row=sel_row_int+6, column=0, padx=8, pady=4, sticky='e'),
    'LAMS_Lesson_Title_entry':      dict(row=sel_row_int+6, column=1, padx=8, columnspan=3, pady=4, sticky='ew'),
    'Upload_Monitor_URL_checkbox':  dict(row=sel_row_int+7, column=0, columnspan=3, padx=8, pady=4, sticky='w'),
    'Upload_Student_URL_checkbox':  dict(row=sel_row_int+8, column=0, columnspan=3, padx=8, pady=4, sticky='w'),
    'sel_btn_frame':                dict(row=sel_row_int+10, column=0, columnspan=3, pady=20, sticky='w')
}

expandbox = tk.PanedWindow(selenium_frame, orient=tk.HORIZONTAL,sashrelief='raised')
expandbox.grid(**sel_grid_opts['instruction_box'])

instruction_mac_text = r"""
MAC:
open -a "Google Chrome" --args \\
    --remote-debugging-port=9222 \\
    --user-data-dir="$HOME/chrome-debug-profile"

then

curl http://127.0.0.1:9222/json
"""
instruction_win_text = r"""
WINDOWS:
& 'C:\Program Files\Google\Chrome\Application\chrome.exe' `
  --remote-debugging-port=9222 `
  --user-data-dir="C:\Users\Neone\chrome-debug-profile"

then

curl http://127.0.0.1:9222/json
"""
selenium_frame.grid_rowconfigure(sel_grid_opts['instruction_box']['row'], weight=0)
selenium_frame.grid_columnconfigure(0, weight=0)
selenium_frame.grid_columnconfigure(1, weight=1)
selenium_frame.grid_columnconfigure(2, weight=1)


tk.Label(selenium_frame, text="/ Elentra Link Upload Automation", font=("Helvetica",14,"bold")).grid(**sel_grid_opts['title_label'])
tk.Label(selenium_frame, text="Ensure you are logged into chrome and downloaded the webdriver before executing").grid(**sel_grid_opts['instruction_label'])
label_mac = tk.Text(expandbox, wrap="word", font=("Helvetica", 10), height=10, width=40, bd=0, padx=10, pady=8)
label_win = tk.Text(expandbox, wrap="word", font=("Helvetica", 10), height=10, width=50, bd=0, padx=10, pady=8)
label_mac.insert("1.0", instruction_mac_text)
label_win.insert("1.0", instruction_win_text)
label_mac.configure(state="disabled")
label_win.configure(state="disabled")
expandbox.add(label_mac)
expandbox.add(label_win)
ttk.Label(selenium_frame, style="secondary.TLabel", text="Step 1: Input Parameters", font=("Helvetica",12)).grid(**sel_grid_opts['step'])
tk.Label(selenium_frame, text=" Elentra Event ID:", width=10).grid(**sel_grid_opts['Elentra_Event_ID'])
Elentra_Event_entry = tk.StringVar(value="1696")
Elentra_Event_label = tk.Entry(selenium_frame,textvariable=Elentra_Event_entry)
Elentra_Event_label.grid(**sel_grid_opts['Elentra_Event_entry'])
#Elentra_Event_entry.insert('1.0', "1696")
tk.Label(selenium_frame, text="LAMS Lesson ID:").grid(**sel_grid_opts['LAMS_Lesson_ID'])
LAMS_Lesson_ID_entry = tk.StringVar(value="37655")
LAMS_Lesson_ID_label = tk.Entry(selenium_frame, textvariable=LAMS_Lesson_ID_entry)
LAMS_Lesson_ID_label.grid(**sel_grid_opts['LAMS_Lesson_ID_entry'])
#LAMS_Lesson_ID_entry.insert('1.0', "37655")
tk.Label(selenium_frame, text="LAMS Lesson Title:").grid(**sel_grid_opts['LAMS_Lesson_Title'])
LAMS_Lesson_Title_entry = tk.StringVar(value="(RPA test)FM_MiniQuiz_WomanHealth_DDMMYY")
LAMS_Lesson_Title_label = tk.Entry(selenium_frame, textvariable=LAMS_Lesson_Title_entry)
LAMS_Lesson_Title_label.grid(**sel_grid_opts['LAMS_Lesson_Title_entry'])
#LAMS_Lesson_Title_entry.insert('1.0', "(RPA test)FM_MiniQuiz_WomanHealth_DDMMYY")
Upload_Monitor_URL_checkbox = tk.BooleanVar(value=True) 
#Upload_Monitor_URL_icon = ttk.Checkbutton(selenium_frame, style="secondary.TCheckbutton", text="Upload Monitor URL", variable=Upload_Monitor_URL_checkbox)
Upload_Monitor_URL_icon = ttk.Checkbutton(selenium_frame, bootstyle="info", text="Upload Monitor URL", variable=Upload_Monitor_URL_checkbox)
Upload_Monitor_URL_icon.grid(**sel_grid_opts['Upload_Monitor_URL_checkbox'])
Upload_Student_URL_checkbox = tk.BooleanVar(value=True) 
#Upload_Student_URL_icon = ttk.Checkbutton(selenium_frame, style="secondary.TCheckbutton", text="Upload Student URL", variable=Upload_Student_URL_checkbox)
Upload_Student_URL_icon = ttk.Checkbutton(selenium_frame, bootstyle="info", text="Upload Student URL", variable=Upload_Student_URL_checkbox)
Upload_Student_URL_icon.grid(**sel_grid_opts['Upload_Student_URL_checkbox'])


# — Selenium buttons —
sel_btn_frame = tk.Frame(selenium_frame); 
sel_btn_frame.grid(**sel_grid_opts['sel_btn_frame'])
sel_btn_frame.grid_columnconfigure(0, weight=1)
sel_btn_frame.grid_columnconfigure(3, weight=1)
sel_start_btn = ttk.Button(sel_btn_frame, style="secondary.Tbutton", text="Step 2: Run Upload", command=lambda:selenium_run_threadsafe()) #goes to run selenium_start then to run_upload_elentra_link
sel_stop_btn  = ttk.Button(sel_btn_frame, bootstyle="dark-outline", text="Stop Upload", command=lambda:selenium_stop.set(True), state='disabled')
#sel_close_btn = ttk.Button(sel_frame, bootstyle="dark-outline", text="Close Program", width=10, command=root.destroy)
sel_start_btn.grid( row=0, column=1, sticky='ew', **btn_opts)
sel_stop_btn.grid(  row=0, column=2,sticky='ew', **btn_opts)
#sel_close_btn.grid(row=0, column=3, **btn_opts)
global_buttons += [sel_start_btn, sel_stop_btn]

###~~~~ About TAB  ~~~~###

# ---- UI Global Log Universal log panel at bottom ----
log_widget = ScrolledText(root, wrap="word", height=15, state="disabled")
log_widget.grid(row=5, column=0, columnspan=3, sticky="s", padx=4, pady=4)
#log_widget.insert('Waiting for next instructions...')
root.grid_rowconfigure(5, weight=1)
#for col in (0, 1, 2):
#    root.grid_columnconfigure(col, weight=1)

# ---- Helper: disable/enable tabs/buttons ----
def set_controls(enabled: bool):
    state = "normal" if enabled else "disabled"
    for btn in global_buttons:
        btn.config(state=state)
    if enabled:
        notebook.tab(0, state="normal"); notebook.tab(1, state="normal"); notebook.tab(2, state="normal")
    else:
        notebook.tab(0, state="disabled"); notebook.tab(1, state="disabled"); notebook.tab(2, state="disabled")
    root.update_idletasks()

# ---- Def Excel Tab Logic ----
def select_folder(var):
    folder = filedialog.askdirectory(initialdir=var.get())
    if folder: var.set(folder)

def excel_run_threadsafe():
    set_controls(False)
    threading.Thread(target=excel_run, daemon=True).start()
    notebook.select(excel_frame)

def excel_run():
    try:
        cid_raw = course_id_text.get('1.0', 'end').strip()
        add_info_raw = add_info_text.get('1.0', 'end').strip()
        role     = role_entry.get().strip()
        folder  = save_dir_var.get().strip()
        os.makedirs(folder, exist_ok=True)
        mode    = mode_var.get()
        emails  = parse_emails(email_text.get('1.0', 'end'))
    
        if not os.path.isdir(folder):
            log("❌ Could not create Save Folder.")
            return

        if mode == 'student':
            name = course_name_entry.get().strip()
            # also require a role and some additional info
            if not (emails and cid_raw and name and role and add_info_raw):
                log("❌ Please fill Course Name, Course ID, Role, Emails AND Additional Info."); 
                return
            # pass role + add_info_raw into build_student_file
            if len(cid_raw.split()) > 1 or len(add_info_raw.split()) > 1:
                log("❌ Course IDs or Additional Info are limited to one entry!")
                return
            
            path = build_student_file(folder, name, cid_raw, emails, role, add_info_raw)
            log(f"✅ Student file generated:\n{path}")
        
        else: #staff
            dept     = dept_entry.get().strip()

            # parse on both lines and commas
            course_ids = [
                part.strip()
                for line in cid_raw.splitlines()
                for part in line.split(',')
                if part.strip()
            ]

            add_infos = [
                part.strip()
                for line in add_info_raw.splitlines()
                for part in line.split(',')
                if part.strip()
            ]
            
            if len(add_infos) != len(course_ids):
                log("❌ You must supply exactly one Additional-Info entry per Course ID.")
                return
            
            # 5) other validations
            if not (emails and course_ids and dept and role):
                log("❌ Please fill Department, Course IDs, Role, and Emails.")
                return

            files = build_staff_files(
                folder,
                dept,
                course_ids,
                emails,
                role,
                add_infos
            )
            log(f"✅ {len(files)} staff files generated:\n" + "\n".join(files))

    finally:
        set_controls(True)

def switch_mode():
    mode = mode_var.get()
    if mode == 'student':
        header_var.set(' | '.join(STUDENT_HEADERS))
        course_name_entry.config(state='normal')
        dept_entry.config(state='disabled')
        role_entry.delete(0, 'end'); role_entry.insert(0, 'Learner')
        course_id_text.delete('1.0', 'end'); course_id_text.insert('1.0', "629")
        add_info_text.delete('1.0', 'end'); add_info_text.insert('1.0', "Course_1")

    else: #staff
        header_var.set(' | '.join(STAFF_HEADERS))
        course_name_entry.config(state='disabled')
        dept_entry.config(state='normal')
        role_entry.delete(0, 'end'); role_entry.insert(0, 'Monitor')
        course_id_text.delete('1.0', 'end'); course_id_text.insert('1.0', sample_course_id_text)
        add_info_text.delete('1.0', 'end'); add_info_text.insert('1.0', sample_course_name_text)

# ---- Def Import Tab Logic ----
import_abort = tk.BooleanVar(value=False)
def import_all_threadsafe():
    set_controls(False)
    import_abort.set(False)
    threading.Thread(target=import_all, daemon=True).start()
    notebook.select(import_frame)

# 3) The scanning function
def scan_files_to_import():
    folder = import_dir_var.get().strip()
    to_import_box.config(state="normal")
    to_import_box.delete("1.0", "end")

    if not os.path.isdir(folder):
        to_import_box.insert("end", f"❌ Invalid folder:\n    {folder}\n")
    else:
        files = [f for f in os.listdir(folder) if f.lower().endswith(".xls")]
        to_import_box.insert("end", f"📂 Scanning: {folder}\n")
        to_import_box.insert("end", f"🔢 {len(files)} file(s) found:\n")
        for fname in files:
            to_import_box.insert("end", f"  • {fname}\n")
        if not files:
            to_import_box.insert("end", "  (no .xls files in this folder)\n")

    to_import_box.config(state="disabled")

def import_all():
    folder = import_dir_var.get().strip()
    if not os.path.isdir(folder):
        log("❌ Please select a valid folder to import from.")
        set_controls(True)
        return
    count = 0
    for fn in os.listdir(folder):
        if import_abort.get():
            log(f"🛑 Import stopped by user after {count} files.")
            break
        if fn.lower().endswith('.xls'):
            count += 1
            full = os.path.join(folder, fn)
            log(f"Uploading {fn}…")
            # --- Insert Selenium upload logic here, e.g., call selenium_upload_file(full)
            # Example: success = selenium_upload_file(full)
            time.sleep(1)  # Simulate upload
            success = True # Placeholder
            if success:
                log(f"✅ {fn} uploaded\n")
            else:
                log(f"❌ {fn} FAILED\n")
    log("All done!" if not import_abort.get() else "Stopped early.")
    set_controls(True)

# ---- Def Selenium Tab Logic ----
selenium_abort = tk.BooleanVar(value=False)
def selenium_run_threadsafe():
    set_controls(False)
    selenium_abort.set(False)
    selenium_frame.tkraise()
    threading.Thread(target=selenium_start, daemon=True).start()
    #threading.Thread(target=selenium_test, daemon=True).start()
    notebook.select(selenium_frame)
    selenium_frame.tkraise()


def selenium_test():
    # Insert your entire Selenium RPA workflow here (from code #1)
    try:
        log("🚦 Selenium RPA started…")
        # Example: for demonstration, just sleep

        for i in range(10):
            if selenium_abort.get():
                log(f"🛑 Selenium stopped by user after step {i+1}.")
                break
            log(f"Step {i+1}/10…")
            time.sleep(0.1)
        
        log("🎉 Selenium workflow done!")
        
    except Exception as e:
        log(f"❌ Selenium error: {e}")

    finally:
        set_controls(True)

time_sleep = 0.5 #1 sec or 0.05 sec # wait x seconds between actions, for presentation purposes
time_out = 10 #wait up to x seconds for element to be clickable
highlight_duration = 0.05 #set in def highlight ()

# function for left to right typing animation
def dramatic_input(element, text, delay=1):
    """Type each character with a small pause to mimic a human."""
    for ch in text:
        element.send_keys(ch)
        # time.sleep(delay)

# function for highlight element in red, for presentation purposes 1 sec or 0.1 sec, value to be lower than time_sleep
def highlight(el, duration = highlight_duration, color='clear', border="4px solid red"):
    # 1) Scroll the element into view
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", el)
    # 2) Save its current style so we can restore later
    original_style = el.get_attribute("style") or ""
    # 3) Overwrite with our highlight style
    highlight_style = f"background: {color} !important; border: {border} !important; {original_style}"
    driver.execute_script("arguments[0].setAttribute('style', arguments[1]);", el, highlight_style)
    # 4) Pause so you can actually *see* it
    time.sleep(highlight_duration) #declared in main
    # 5) Restore original style
    driver.execute_script("arguments[0].setAttribute('style', arguments[1]);", el, original_style)

# function for Wait until clickable
def wait_and_click(driver, xpath, timeout, highlight_fn, message, sleep_after):
    """
    Wait up to `timeout` seconds for an element to be clickable, highlight it, click it, print `message`, sleep, and return the element.
    If it never becomes clickable, logs an error and re-raises.
    """
    global log_var, root
    try:
        el = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, xpath))
        )
        if highlight_fn:
            highlight_fn(el)
        el.click()
        if message:
            log(message)
            root.update() #better root.update_idletasks()
            
        if sleep_after:
            time.sleep(sleep_after) # time sleep declared in main
        return el

    except TimeoutException:
        print("❌ Element never became clickable: %s", xpath)
        log.error("Element never became clickable: %s", xpath) # re-raise so outer code can catch it if desired
        raise

#main function
def run_upload_elentra_link(Elentra_Event_entry, LAMS_Lesson_ID_entry, LAMS_Lesson_Title_entry, Upload_Monitor_URL_checkbox, Upload_Student_URL_checkbox):
    start_time = time.time()  
     
    # 1) Request for inputs 
    elentra_event_id   = Elentra_Event_entry
    elentra_event_name = None
    lams_lesson_id     = LAMS_Lesson_ID_entry
    lams_lesson_title  = LAMS_Lesson_Title_entry
    use_monitor        = Upload_Monitor_URL_checkbox
    use_student        = Upload_Student_URL_checkbox

    #print("Choices:", elentra_event_id, lams_lesson_id,lams_lesson_title, use_monitor, use_student)
    print("✅ ID input")
    log("✅ ID input")

    # 2) Build URLs & Title
    elentra_event_url   = f"https://ntu.elentra.cloud/events?id={elentra_event_id}"
    #elentra_event_name = f"Elentra {elentra_event_id}"
    lams_monitor_title = f"LAMS {lams_lesson_title} (Facilitator/CE)"
    lams_monitor_url   = f"https://ilams.lamsinternational.com/lams/monitoring/monitoring/monitorLesson.do?lessonID={lams_lesson_id}"
    lams_student_title = f"LAMS {lams_lesson_title}"
    lams_student_url   = f"https://ilams.lamsinternational.com/lams/home/learner.do?lessonID={lams_lesson_id}"
    print("✅ URL input")
    log("✅ URL input")
    
    # 3) Setup Chrome WebDriver to attach to existing debug session
    #macos-----
    chrome_driver_path = "/Users/neltontan/Driver/chromedriver-mac-arm64/chromedriver"
    #windows-----
    # chrome_driver_path = "C:\WebDrivers\chromedriver-win64\chromedriver.exe"

    global driver
    service = Service(executable_path=chrome_driver_path)
    options = Options()
    options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
    driver = webdriver.Chrome(service=service, options=options)
    print("✅ Chrome WebDriver started")
    log("✅ Chrome WebDriver started")
    
    try:
        # 4) Navigate to Elentra Event Page
        if True: #to group the lines of code
            driver.get(elentra_event_url)
            print("✅ Navigated to Elentra event page")
            log("✅ Navigated to Elentra event page")
            time.sleep(time_sleep)

        # 5) Administrator checkbox
        wait_and_click(
            driver,
            "/html/body/div[1]/div/div[2]/div[2]/div[3]/div[2]/ul/li[2]/a/span",
            timeout=time_out,
            highlight_fn=highlight,
            message="✅ Administrator checkbox clicked",
            sleep_after=time_sleep
        )

        # 6) Content tab
        wait_and_click(
            driver,
            "/html/body/div[1]/div/div[3]/div/div[2]/ul/li[2]/a",
            timeout=time_out,
            highlight_fn=highlight,
            message="✅ Content link clicked",
            sleep_after=time_sleep
        )

        # event name
        if True: #to group the lines of code
        # a) wait for the H1 to be present
            h1 = WebDriverWait(driver, time_out).until(
                EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div/div[3]/div/h1[1]"))
            )
            highlight(h1)
            # b) extract its text
            elentra_event_name = h1.text
            print("✅ Page title is:", elentra_event_name)
            log("✅ Page title is: "+ elentra_event_name)

        log("⏳ Inserting MONITOR URL⏳")
        print("⏳ Inserting MONITOR URL⏳")
        if use_monitor:
            # 7) Scroll down page
            if True: #to group the lines of code
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                print("✅ Scrolled to bottom")
                log("✅ Scrolled to bottom")
                time.sleep(time_sleep)

            # 8) No Time Frame
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[3]/ul/li[4]/a",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No Time Frame link clicked",
                sleep_after=time_sleep
            )
            
            # 9) Add a Resource
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[3]/div[1]/a",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Add a Resource link clicked",
                sleep_after=time_sleep
            )

            # 10) 'Link' Resource checkbox
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div/label[6]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Link checkbox selected",
                sleep_after=time_sleep
            )

            # 11) Next Step
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Next Step Button clicked",
                sleep_after=time_sleep
            ) 
            
            #** 12) Optional 
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[1]/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Optional selected",
                sleep_after=time_sleep
            )
            
            # 13) No Timeframe
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[2]/label[4]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No Timeframe link clicked",
                sleep_after=time_sleep
            )
            
            # 14) Next Step
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Next step (to Hide)",
                sleep_after=time_sleep
            )
            
            # 15) No, this resource is accessible any time
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[1]/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No, this resource is accessible any time selected",
                sleep_after=time_sleep
            )
            
            #** 16) Hide this resource from learners
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[3]/label[2]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Hide this resource from learners selected",
                sleep_after=time_sleep
            )
            
            # 17) Published
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[4]/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Published selected",
                sleep_after=time_sleep
            )
            
            # 18) Next Step
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Final Next Step clicked",
                sleep_after=time_sleep
            )
            
            # 18.5) No, the proxy isnt required to be enabled selected
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[1]/div/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No, the proxy isnt required to be enabled selected",
                sleep_after=time_sleep
            )

            print("⏳ Inserting LAMS title & URL now ⏳")
            log("⏳ Inserting LAMS title & URL now ⏳")
            
            #*** 19) Enter Monitor URL
            if True:
                time.sleep(0.5)
                el = WebDriverWait(driver, time_sleep).until(
                    EC.visibility_of_element_located((By.XPATH,
                        "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[2]/div/input"
                    ))
                )
                highlight(el)
                el.clear()
                el.send_keys(lams_monitor_url)
                #dramatic_input(el, lams_monitor_url)
                print("✅ Monitor URL entered")
                log("✅ Monitor URL entered")
                time.sleep(time_sleep)
            
            #*** 20) Enter Lesson Title
            if True: #to group the lines of code
                el = WebDriverWait(driver, time_sleep).until(
                    EC.visibility_of_element_located((By.XPATH,
                        "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[3]/div/input"
                    ))
                )
                highlight(el)
                el.clear()
                el.send_keys(lams_monitor_title)
                #dramatic_input(el, LAMS_Lesson_Title_2)
                print("✅ Title entered")
                log("✅ Title entered")
                time.sleep(time_sleep)

            #*** 21) Scroll the message box to the bottom
            if True: #to group the lines of code
                modal = WebDriverWait(driver, time_out).until(
                    EC.presence_of_element_located((By.ID, "event-resource-modal"))
                )
                highlight(modal)
                driver.execute_script(
                    "arguments[0].scrollTop = arguments[0].scrollHeight;",
                    modal
                )
                print("✅ Modal scrolled to bottom")
                log("✅ Modal scrolled to bottom")
                time.sleep(time_sleep)
                  
            #*** 22) Enter Description
            time.sleep(0.5)
            if True: #to group the lines of code
                iframe = driver.find_element(
                    By.CSS_SELECTOR,
                    "#cke_event-resource-link-description iframe.cke_wysiwyg_frame"
                )
                driver.switch_to.frame(iframe)
                print("✅ Switched to iframe")
                log("✅ Switched to iframe")

                editor_body = driver.find_element(
                    By.CSS_SELECTOR,
                    "body[contenteditable='true']"
                )
                highlight(editor_body)
                try:
                    editor_body.clear()
                except:
                    editor_body.send_keys(Keys.COMMAND + "a", Keys.DELETE)
                
                editor_body.send_keys(lams_monitor_title)
                #dramatic_input(editor_body, LAMS_Lesson_Title_2)
                driver.switch_to.default_content()
                print("✅ Description added")
                log("✅ Description added")

                time.sleep(time_sleep)

            # 23) Save Resource
            time.sleep(0.5)
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Resource saved",
                sleep_after=time_sleep
            )

            # 24) Close
            time.sleep(0.5)
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Closed attachment dialog",
                sleep_after=time_sleep,
                
            )
        
        log("⏳ Inserting STUDENT URL⏳")
        print("⏳ Inserting STUDENT URL⏳")
        if use_student:
            # 7) Scroll down page
            if True: #to group the lines of code
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                print("✅ Scrolled to bottom")
                log("✅ Scrolled to bottom")
                time.sleep(time_sleep)

            #  Nelton: cuz button grayout, so cannot click 
            # # 8) No Time Frame
            # wait_and_click(
            #     driver,
            #     "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[3]/ul/li[4]/a",
            #     timeout=time_out,
            #     highlight_fn=highlight,
            #     message="✅ No Time Frame link clicked",
            #     sleep_after=time_sleep
            # )

            # 9) Add a Resource
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[3]/div[1]/a",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Add a Resource link clicked",
                sleep_after=time_sleep
            )

            # 10) 'Link' Resource checkbox
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div/label[6]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Link checkbox selected",
                sleep_after=time_sleep
            )

            # 11) Next Step
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Next Step Button clicked",
                sleep_after=time_sleep
            ) 
            
            #** 12) Required 
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[1]/label[2]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Optional selected",
                sleep_after=time_sleep
            )
            
            # 13) No Timeframe
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[2]/label[4]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No Timeframe link clicked",
                sleep_after=time_sleep
            )
            
            # 14) Next Step
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Next step (to Hide)",
                sleep_after=time_sleep
            )
            
            # 15) No, this resource is accessible any time
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[1]/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No, this resource is accessible any time selected",
                sleep_after=time_sleep
            )
            
            #** 16) Hide this resource from learners
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[3]/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Allow learners to view this resource selected",
                sleep_after=time_sleep
            )
            
            # 17) Published
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[4]/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Published selected",
                sleep_after=time_sleep
            )
            
            # 18) Next Step
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Final Next Step clicked",
                sleep_after=time_sleep
            )
            
            # 18.5) No, the proxy isnt required to be enabled selected
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[1]/div/label[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ No, the proxy isnt required to be enabled selected",
                sleep_after=time_sleep
            )
            
            print("⏳ Inserting LAMS title & URL now ⏳")
            log("⏳ Inserting LAMS title & URL now ⏳")
            
            #*** 19) Enter Monitor URL
            if True:
                time.sleep(0.5)
                el = WebDriverWait(driver, time_sleep).until(
                    EC.visibility_of_element_located((By.XPATH,
                        "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[2]/div/input"
                    ))
                )
                highlight(el)
                el.clear()
                el.send_keys(lams_student_url)
                #dramatic_input(el, lams_monitor_url)
                print("✅ Monitor URL entered")
                log("✅ Monitor URL entered")
                time.sleep(time_sleep)
            
            #*** 20) Enter Lesson Title
            if True: #to group the lines of code
                el = WebDriverWait(driver, time_sleep).until(
                    EC.visibility_of_element_located((By.XPATH,
                        "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[2]/form/div[2]/div[3]/div/input"
                    ))
                )
                highlight(el)
                el.clear()
                el.send_keys(lams_student_title)
                #dramatic_input(el, LAMS_Lesson_Title_2)
                print("✅ Title entered")
                time.sleep(time_sleep)

            #*** 21) Scroll the message box to the bottom
            if True: #to group the lines of code
                modal = WebDriverWait(driver, time_out).until(
                    EC.presence_of_element_located((By.ID, "event-resource-modal"))
                )
                highlight(modal)
                driver.execute_script(
                    "arguments[0].scrollTop = arguments[0].scrollHeight;",
                    modal
                )
                print("✅ Modal scrolled to bottom")
                log("✅ Modal scrolled to bottom")
                time.sleep(time_sleep)
                time.sleep(0.5)
            
            #*** 22) Enter Description
            time.sleep(0.5)
            if True: #to group the lines of code
                iframe = driver.find_element(
                    By.CSS_SELECTOR,
                    "#cke_event-resource-link-description iframe.cke_wysiwyg_frame"
                )
                driver.switch_to.frame(iframe)
                print("✅ Switched to iframe")
                log("✅ Switched to iframe")

                editor_body = driver.find_element(
                    By.CSS_SELECTOR,
                    "body[contenteditable='true']"
                )
                highlight(editor_body)
                try:
                    editor_body.clear()
                except:
                    editor_body.send_keys(Keys.COMMAND + "a", Keys.DELETE)
                
                editor_body.send_keys(lams_student_title)
                #dramatic_input(editor_body, LAMS_Lesson_Title_2)
                driver.switch_to.default_content()
                print("✅ Description added")
                log("✅ Description added")
                time.sleep(time_sleep)

            # 23) Save Resource
            time.sleep(0.5)
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[3]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Resource saved",
                sleep_after=time_sleep
            )

            # 24) Close
            time.sleep(0.5)
            wait_and_click(
                driver,
                "/html/body/div[1]/div/div[3]/div/div[7]/div[1]/div[6]/div/div/div/div[3]/button[1]",
                timeout=time_out,
                highlight_fn=highlight,
                message="✅ Closed attachment dialog",
                sleep_after=time_sleep
            )
        # Final summary
        print("🎉 Resource added successfully for ⬇️")
        print("   Elentra Event Name: "+ elentra_event_name)
        print("   Elentra Event URL : "+ elentra_event_url)

        log("🎉 Resource added successfully for ⬇️")
        log("   Elentra Event Name: "+ elentra_event_name)
        log("   LAMS Lesson ID    : "+ lams_lesson_id)
        
        if use_monitor:
            print("   LAMS Lesson Title  : "+ lams_monitor_title)
            print("   LAMS Monitor URL  : "+ lams_monitor_url)
            log("   LAMS Lesson Title : "+ lams_monitor_title)
            log("   LAMS Monitor URL  : "+ lams_monitor_url)

        if use_student:
            print("   LAMS Student Title : "+ lams_student_title)
            print("   LAMS Student URL  : "+ lams_student_url)
            log("   LAMS Student Title : "+ lams_student_title)
            log("   LAMS Student URL  : "+ lams_student_url)

    except Exception as e:
            print("❌ Resource not added successfully:", e)
            log(f"❌ Resource not added successfully:,{e}")

    finally:
            # driver.quit()
            elapsed = time.time() - start_time
            print(f"⏱ Total elapsed time: {elapsed:.1f} seconds")
            log(f"⏱ Total elapsed time: {elapsed:.1f} seconds")
            for w in (Elentra_Event_entry, LAMS_Lesson_ID_entry, LAMS_Lesson_Title_entry, Upload_Monitor_URL_checkbox, Upload_Student_URL_checkbox, sel_start_btn, sel_start_btn):
                w.config(state="normal")

# — when OK is pressed, disable inputs, queue the automation, but do NOT destroy
def selenium_start():
# 1) make sure at least one of the two URLs is requested
    if not (Upload_Monitor_URL_checkbox.get() or Upload_Student_URL_checkbox.get()):
        messagebox.showerror(
        "Selection error",
        "Please select at least one of:\n"
        "  • Upload Monitor URL\n"
        "  • Upload Student URL"
        )
        return

# 2) make sure none of the three text fields is blank
    if not Elentra_Event_entry.get().strip() \
    or not LAMS_Lesson_ID_entry.get().strip() \
    or not LAMS_Lesson_Title_entry.get().strip():
        messagebox.showerror(
            "Input error",
            "Please fill in:\n"
            "  • Elentra Event ID\n"
            "  • LAMS Lesson ID\n"
            "  • LAMS Lesson Title"
        )
        return

# 3) everything’s valid, so disable inputs and kick off the robot
    for w in (Elentra_Event_label, LAMS_Lesson_ID_label, LAMS_Lesson_Title_label, Upload_Monitor_URL_icon, Upload_Student_URL_icon, sel_start_btn):
        w.config(state="disabled") 
    
    log("🏁 I want to end my work early....")
    # log_var.set("🏁 Starting Clifford Bot…\n")
    root.after(100, lambda: run_upload_elentra_link(
        Elentra_Event_entry.get().strip(),
        LAMS_Lesson_ID_entry.get().strip(),
        LAMS_Lesson_Title_entry.get().strip(),
        Upload_Monitor_URL_checkbox.get(),
        Upload_Student_URL_checkbox.get()
    ))

def selenium_stop():
        # 1) if you’ve already created a Selenium driver, tear it down
        if 'driver' in globals() and driver:
            try:
                driver.quit()
                sel_start_btn.config(state="enabled")
                #sel_close_btn.config(state="enabled")
                sel_stop_btn.config(state="enabled")
                selenium_abort.set(False)
            except Exception:
                pass

# ---- Initialize ----
switch_mode()
root.update()
root.minsize(root.winfo_width(), root.winfo_height())
root.resizable(False, False)
root.mainloop()
